<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>raft on LifeIO</title>
    <link>https://iohub.github.io/tags/raft/</link>
    <description>Recent content in raft on LifeIO</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 27 Jun 2023 20:57:59 +0800</lastBuildDate>
    <atom:link href="https://iohub.github.io/tags/raft/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Raft协议:etcd如何实现高可用、数据强一致的?</title>
      <link>https://iohub.github.io/2023/06/27/etcd%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E9%AB%98%E5%8F%AF%E7%94%A8-%E6%95%B0%E6%8D%AE%E5%BC%BA%E4%B8%80%E8%87%B4%E7%9A%84/</link>
      <pubDate>Tue, 27 Jun 2023 20:57:59 +0800</pubDate>
      <guid>https://iohub.github.io/2023/06/27/etcd%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E9%AB%98%E5%8F%AF%E7%94%A8-%E6%95%B0%E6%8D%AE%E5%BC%BA%E4%B8%80%E8%87%B4%E7%9A%84/</guid>
      <description>&lt;p&gt;在前面的 etcd 读写流程学习中，我和你多次提到了 etcd 是基于 Raft 协议实现高可用、数据强一致性的。&lt;/p&gt;&#xA;&lt;p&gt;那么 etcd 是如何基于 Raft 来实现高可用、数据强一致性的呢？&lt;/p&gt;&#xA;&lt;p&gt;这节课我们就以上一节中的 hello 写请求为案例，深入分析 etcd 在遇到 Leader 节点 crash 等异常后，Follower 节点如何快速感知到异常，并高效选举出新的 Leader，对外提供高可用服务的。&lt;/p&gt;&#xA;&lt;p&gt;同时，我将通过一个日志复制整体流程图，为你介绍 etcd 如何保障各节点数据一致性，并介绍 Raft 算法为了确保数据一致性、完整性，对 Leader 选举和日志复制所增加的一系列安全规则。希望通过这节课，让你了解 etcd 在节点故障、网络分区等异常场景下是如何基于 Raft 算法实现高可用、数据强一致的。&lt;/p&gt;&#xA;&lt;h2 class=&#34;group head-tag&#34; id=&#34;如何避免单点故障&#34;&gt;如何避免单点故障&lt;a data-title-of-head class=&#34;group-hover:after:content-[&#39;__#&#39;] no-underline hover:text-blue-700&#34; href=&#34;#%e5%a6%82%e4%bd%95%e9%81%bf%e5%85%8d%e5%8d%95%e7%82%b9%e6%95%85%e9%9a%9c&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;在介绍 Raft 算法之前，我们首先了解下它的诞生背景，Raft 解决了分布式系统什么痛点呢？&lt;/p&gt;&#xA;&lt;p&gt;首先我们回想下，早期我们使用的数据存储服务，它们往往是部署在单节点上的。但是单节点存在单点故障，一宕机就整个服务不可用，对业务影响非常大。&lt;/p&gt;&#xA;&lt;p&gt;随后，为了解决单点问题，软件系统工程师引入了数据复制技术，实现多副本。通过数据复制方案，一方面我们可以提高服务可用性，避免单点故障。另一方面，多副本可以提升读吞吐量、甚至就近部署在业务所在的地理位置，降低访问延迟。&lt;/p&gt;&#xA;&lt;h3 class=&#34;group head-tag&#34; id=&#34;多副本复制是如何实现的呢&#34;&gt;多副本复制是如何实现的呢？&lt;a data-title-of-head class=&#34;group-hover:after:content-[&#39;__#&#39;] no-underline hover:text-blue-700&#34; href=&#34;#%e5%a4%9a%e5%89%af%e6%9c%ac%e5%a4%8d%e5%88%b6%e6%98%af%e5%a6%82%e4%bd%95%e5%ae%9e%e7%8e%b0%e7%9a%84%e5%91%a2&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;多副本常用的技术方案主要有主从复制和去中心化复制。主从复制，又分为全同步复制、异步复制、半同步复制，比如 MySQL/Redis 单机主备版就基于主从复制实现的。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
