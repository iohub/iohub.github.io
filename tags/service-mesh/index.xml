<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>service Mesh on LifeIO</title>
    <link>https://iohub.github.io/tags/service-mesh/</link>
    <description>Recent content in service Mesh on LifeIO</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 24 May 2018 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://iohub.github.io/tags/service-mesh/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Everything about Setting Up My Ubuntu Desktop</title>
      <link>https://iohub.github.io/2018/05/24/set_up_my_ubuntu_desktop/</link>
      <pubDate>Thu, 24 May 2018 00:00:00 +0000</pubDate>
      <guid>https://iohub.github.io/2018/05/24/set_up_my_ubuntu_desktop/</guid>
      <description>Generate SSH Key Pairssh-keygen -C &amp;#34;zhaohuabing@gmail.com&amp;#34; ShadowsocksInstall shadowsokcs sudo apt-get install python3-pip sudo pip3 install shadowsocks Create config at config/shadowsocks.json, with the following content: { &amp;#34;server&amp;#34;:&amp;#34;remote-shadowsocks-server-ip-addr&amp;#34;, &amp;#34;server_port&amp;#34;:443, &amp;#34;local_address&amp;#34;:&amp;#34;127.0.0.1&amp;#34;, &amp;#34;local_port&amp;#34;:1080, &amp;#34;password&amp;#34;:&amp;#34;your-passwd&amp;#34;, &amp;#34;timeout&amp;#34;:300, &amp;#34;method&amp;#34;:&amp;#34;aes-256-cfb&amp;#34;, &amp;#34;fast_open&amp;#34;:false, &amp;#34;workers&amp;#34;:1 } Start a local socks proxy sudo sslocal -c config/shadowsocks.json -d start In case there is an openssl error, modify shadowsocks source file. sudo vi /usr/local/lib/python3.6/dist-packages/shadowsocks/crypto/openssl.py :%s/cleanup/reset/gc Convert shadowsocks socks proxy to http proxy sudo apt-get</description>
    </item>
    <item>
      <title>微服务安全沉思录之二</title>
      <link>https://iohub.github.io/2018/05/23/service_2_service_auth/</link>
      <pubDate>Wed, 23 May 2018 15:00:00 +0000</pubDate>
      <guid>https://iohub.github.io/2018/05/23/service_2_service_auth/</guid>
      <description>&lt;h2 class=&#34;group head-tag&#34; id=&#34;服务间认证与鉴权&#34;&gt;服务间认证与鉴权&lt;a data-title-of-head class=&#34;group-hover:after:content-[&#39;__#&#39;] no-underline hover:text-blue-700&#34; href=&#34;#%e6%9c%8d%e5%8a%a1%e9%97%b4%e8%ae%a4%e8%af%81%e4%b8%8e%e9%89%b4%e6%9d%83&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;除来自用户的访问请求以外，微服务应用中的各个微服务相互之间还有大量的访问，包括下述场景：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用户间接触发的微服务之间的相互访问&lt;!-- raw HTML omitted --&gt;&#xA;例如在一个网上商店应用中，用户访问购物车微服务进行结算时，购物车微服务可能需要访问用户评级微服务获取用户的会员级别，以得到用户可以享受购物折扣。&lt;/li&gt;&#xA;&lt;li&gt;非用户触发的微服务之间的相互访问&lt;!-- raw HTML omitted --&gt;&#xA;例如数据同步或者后台定时任务导致的微服务之间的相互访问。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;根据应用系统的数据敏感程度的不同，对于系统内微服务的相互访问可能有不同的安全要求。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Istio Sidecar自动注入原理</title>
      <link>https://iohub.github.io/2018/05/23/istio-auto-injection-with-webhook/</link>
      <pubDate>Wed, 23 May 2018 00:00:00 +0000</pubDate>
      <guid>https://iohub.github.io/2018/05/23/istio-auto-injection-with-webhook/</guid>
      <description>&lt;h2 class=&#34;group head-tag&#34; id=&#34;前言&#34;&gt;前言&lt;a data-title-of-head class=&#34;group-hover:after:content-[&#39;__#&#39;] no-underline hover:text-blue-700&#34; href=&#34;#%e5%89%8d%e8%a8%80&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;hr&gt;&#xA;&lt;p&gt;Kubernets 1.9 版本引入了 Admission Webhook(web 回调)扩展机制，通过 Webhook,开发者可以非常灵活地对 Kubernets API Server 的功能进行扩展，在 API Server 创建资源时对资源进行验证或者修改。&lt;/p&gt;&#xA;&lt;p&gt;使用 webhook 的优势是不需要对 API Server 的源码进行修改和重新编译就可以扩展其功能。插入的逻辑实现为一个独立的 web 进程，通过参数方式传入到 kubernets 中，由 kubernets 在进行自身逻辑处理时对扩展逻辑进行回调。&lt;/p&gt;&#xA;&lt;p&gt;Istio 0.7 版本就利用了 Kubernets webhook 实现了 sidecar 的自动注入。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Service Mesh 和 API Gateway的关系探讨（译文）</title>
      <link>https://iohub.github.io/2018/04/11/service-mesh-vs-api-gateway/</link>
      <pubDate>Wed, 11 Apr 2018 09:32:00 +0000</pubDate>
      <guid>https://iohub.github.io/2018/04/11/service-mesh-vs-api-gateway/</guid>
      <description>Service Mesh vs API Gateway在 前一篇关于 Service Mesh 的文章 中,我提到了几个关于 Service Mesh 和 API Gateway 之间关系的问题，在本篇文章中，我打算就 Service Mesh 和 API Gateway 的用途进行进一步讨</description>
    </item>
    <item>
      <title>谈谈微服务架构中的基础设施：Service Mesh与Istio</title>
      <link>https://iohub.github.io/2018/03/29/what-is-service-mesh-and-istio/</link>
      <pubDate>Thu, 29 Mar 2018 12:00:00 +0000</pubDate>
      <guid>https://iohub.github.io/2018/03/29/what-is-service-mesh-and-istio/</guid>
      <description>微服务架构的演进作为一种架构模式，微服务将复杂系统切分为数十乃至上百个小服务，每个服务负责实现一个独立的业务逻辑。这些小服务易于被小型的软件</description>
    </item>
    <item>
      <title>如何配置docker使用HTTP代理</title>
      <link>https://iohub.github.io/2018/03/13/use-docker-behind-http-proxy/</link>
      <pubDate>Tue, 13 Mar 2018 18:00:00 +0000</pubDate>
      <guid>https://iohub.github.io/2018/03/13/use-docker-behind-http-proxy/</guid>
      <description>&lt;h2 class=&#34;group head-tag&#34; id=&#34;ubuntu&#34;&gt;Ubuntu&lt;a data-title-of-head class=&#34;group-hover:after:content-[&#39;__#&#39;] no-underline hover:text-blue-700&#34; href=&#34;#ubuntu&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3 class=&#34;group head-tag&#34; id=&#34;设置-docker-使用-http-proxy&#34;&gt;设置 docker 使用 http proxy&lt;a data-title-of-head class=&#34;group-hover:after:content-[&#39;__#&#39;] no-underline hover:text-blue-700&#34; href=&#34;#%e8%ae%be%e7%bd%ae-docker-%e4%bd%bf%e7%94%a8-http-proxy&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo /etc/default/docker&#xA;&#xA;export http_proxy=&amp;#34;http://127.0.0.1:3128/&amp;#34;&#xA;export https_proxy=&amp;#34;http://127.0.0.1:3128/&amp;#34;&#xA;export HTTP_PROXY=&amp;#34;http://127.0.0.1:3128/&amp;#34;&#xA;export HTTPS_PROXY=&amp;#34;http://127.0.0.1:3128/&amp;#34;&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Vim Tips</title>
      <link>https://iohub.github.io/2018/02/09/vim-tips/</link>
      <pubDate>Fri, 09 Feb 2018 11:00:00 +0000</pubDate>
      <guid>https://iohub.github.io/2018/02/09/vim-tips/</guid>
      <description>&lt;h2 class=&#34;group head-tag&#34; id=&#34;vim-graphical-cheat-sheet&#34;&gt;vim graphical cheat sheet&lt;a data-title-of-head class=&#34;group-hover:after:content-[&#39;__#&#39;] no-underline hover:text-blue-700&#34; href=&#34;#vim-graphical-cheat-sheet&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&#xA;  &lt;figure class=&#34;data-image-info &#34;&gt;&#xA;    &lt;img&#xA;      class=&#34;data-image&#34;&#xA;      src=&#34;//img/2018-02-09-vim-tips/vi-vim-cheat-sheet.svg&#34;&#xA;      alt=&#34;&#34;&#xA;      loading=&#34;lazy&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;  &lt;/figure&gt;</description>
    </item>
    <item>
      <title>如何使用非root用户执行docker命令</title>
      <link>https://iohub.github.io/2018/02/09/docker-without-sudo/</link>
      <pubDate>Fri, 09 Feb 2018 10:00:00 +0000</pubDate>
      <guid>https://iohub.github.io/2018/02/09/docker-without-sudo/</guid>
      <description>Add the docker group if it doesn&amp;rsquo;t already exist:sudo groupadd docker Add the connected user &amp;ldquo;$USER&amp;rdquo; to the docker group. Change the user name to match your preferred user if you do not want to use your current user:sudo gpasswd -a $USER docker Either do a newgrp docker or log out/in to activate the changes to groups.</description>
    </item>
    <item>
      <title>如何构建安全的微服务应用？</title>
      <link>https://iohub.github.io/2018/05/22/authentication-and-authorization-of-microservice/</link>
      <pubDate>Sat, 03 Feb 2018 12:00:00 +0000</pubDate>
      <guid>https://iohub.github.io/2018/05/22/authentication-and-authorization-of-microservice/</guid>
      <description>&lt;h2 class=&#34;group head-tag&#34; id=&#34;前言&#34;&gt;前言&lt;a data-title-of-head class=&#34;group-hover:after:content-[&#39;__#&#39;] no-underline hover:text-blue-700&#34; href=&#34;#%e5%89%8d%e8%a8%80&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;微服务架构的引入为软件应用带来了诸多好处：包括小开发团队，缩短开发周期，语言选择灵活性，增强服务伸缩能力等。与此同时，也引入了分布式系统的诸多复杂问题。其中一个挑战就是如何在微服务架构中实现一个灵活，安全，高效的认证和鉴权方案。本文将尝试就此问题进行一次比较完整的探讨。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Nginx开源Service Mesh组件Nginmesh安装指南</title>
      <link>https://iohub.github.io/2018/01/02/nginmesh-install/</link>
      <pubDate>Tue, 02 Jan 2018 12:00:00 +0000</pubDate>
      <guid>https://iohub.github.io/2018/01/02/nginmesh-install/</guid>
      <description>&lt;h2 class=&#34;group head-tag&#34; id=&#34;前言&#34;&gt;前言&lt;a data-title-of-head class=&#34;group-hover:after:content-[&#39;__#&#39;] no-underline hover:text-blue-700&#34; href=&#34;#%e5%89%8d%e8%a8%80&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Nginmesh 是 NGINX 的 Service Mesh 开源项目，用于 Istio 服务网格平台中的数据面代理。它旨在提供七层负载均衡和服务路由功能，与 Istio 集成作为 sidecar 部署，并将以“标准，可靠和安全的方式”使得服务间通信更容易。Nginmesh 在今年底已经连续发布了 0.2 和 0.3 版本，提供了服务发现，请求转发，路由规则，性能指标收集等功能。&lt;/p&gt;</description>
    </item>
    <item>
      <title>如何从外部访问Kubernetes集群中的应用？</title>
      <link>https://iohub.github.io/2017/11/28/access-application-from-outside/</link>
      <pubDate>Tue, 28 Nov 2017 12:00:00 +0000</pubDate>
      <guid>https://iohub.github.io/2017/11/28/access-application-from-outside/</guid>
      <description>前言我们知道，kubernetes 的 Cluster Network 属于私有网络，只能在 cluster Network 内部才能访问部署的应用，那如何才能将 Kubernetes 集群中的应用暴露到外部网络，为外部用户</description>
    </item>
  </channel>
</rss>
