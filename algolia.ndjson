{"description":"对 Hugo 主题 Seven 需要配置到的参数进行说明","objectID":"0bdfdedb37d7b1cc0d0883351fc874fc","permalink":"https://seven-demo.supcat.cn/doc/2023-07-14-configuration-parameter-description/","tags":["doc","配置参数"],"title":"Seven主题配置参数说明篇"}
{"description":"本任务将演示如何将应用流量逐渐从旧版本的服务迁移到新版本。通过Istio，可以使用一系列不同权重的规则（10%，20%，··· 100%）将流量平缓地从旧版本服务迁移到新版本服务。","objectID":"7a2b8003f26ae16f4a205fec6efba48c","permalink":"https://seven-demo.supcat.cn/2017/11/07/istio-traffic-shifting/","tags":["Istio"],"title":"使用Istio实现应用流量转移"}
{"description":"当应用上线以后，运维面临的一大挑战是如何能在不影响已上线业务的情况下进行升级。本文将介绍如何使用Istio实现应用的灰度发布（金丝雀发布）","objectID":"3752a990af3a118aea08355a06748fb1","permalink":"https://seven-demo.supcat.cn/2017/11/08/istio-canary-release/","tags":["Istio"],"title":"采用Istio实现灰度发布(金丝雀发布)"}
{"description":"我们知道，kubernetes的Cluster Network属于私有网络，只能在cluster Network内部才能访问部署的应用，那如何才能将Kubernetes集群中的应用暴露到外部网络，为外部用户提供服务呢？本文探讨了从外部网络访问kubernetes cluster中应用的几种实现方式。","objectID":"b58c18d155eb1b1cde27e20048209d52","permalink":"https://seven-demo.supcat.cn/2017/11/28/access-application-from-outside/","tags":["Kubernetes","service Mesh"],"title":"如何从外部访问Kubernetes集群中的应用？"}
{"description":"Nginmesh是NGINX的Service Mesh开源项目，用于Istio服务网格平台中的数据面代理。它旨在提供七层负载均衡和服务路由功能，与Istio集成作为sidecar部署，并将以“标准，可靠和安全的方式”使得服务间通信更容易。Nginmesh在今年底已经连续发布了0.2和0.3版本，提供了服务发现，请求转发，路由规则，性能指标收集等功能。本文介绍如何采用kubeadmin安装kubernetes集群并部署Nginmesh sidecar。","objectID":"b8d8bb30fee4e42bbac6e0b8be404146","permalink":"https://seven-demo.supcat.cn/2018/01/02/nginmesh-install/","tags":["Istio","service Mesh","nginmesh"],"title":"Nginx开源Service Mesh组件Nginmesh安装指南"}
{"description":"微服务架构的引入为软件应用带来了诸多好处：包括小开发团队，缩短开发周期，语言选择灵活性，增强服务伸缩能力等。与此同时，也引入了分布式系统的诸多复杂问题。其中一个挑战就是如何在微服务架构中实现一个灵活，安全，高效的认证和鉴权方案。本文将尝试就此问题进行一次比较完整的探讨。","objectID":"ac73e10d7e4d285ed469790529258b30","permalink":"https://seven-demo.supcat.cn/2018/05/22/authentication-and-authorization-of-microservice/","tags":["Microservice","Security","service Mesh"],"title":"如何构建安全的微服务应用？"}
{"description":"如何使用非root用户执行docker命令","objectID":"5823ae67528b62e22f46597049b0e300","permalink":"https://seven-demo.supcat.cn/2018/02/09/docker-without-sudo/","tags":["Tips","Docker","service Mesh"],"title":"如何使用非root用户执行docker命令"}
{"description":"Vim Tips and tricks","objectID":"58227bf402e03b606a86ae44d5f2c98b","permalink":"https://seven-demo.supcat.cn/2018/02/09/vim-tips/","tags":["Tips","Vim","service Mesh"],"title":"Vim Tips"}
{"description":"如何配置docker使用HTTP代理","objectID":"4261364ad75df0e955afae1b531a49a7","permalink":"https://seven-demo.supcat.cn/2018/03/13/use-docker-behind-http-proxy/","tags":["Tips","Docker","service Mesh"],"title":"如何配置docker使用HTTP代理"}
{"description":"作为一种架构模式，微服务将复杂系统切分为数十乃至上百个小服务，每个服务负责实现一个独立的业务逻辑。这些小服务易于被小型的软件工程师团队所理解和修改，并带来了语言和框架选择灵活性，缩短应用开发上线时间，可根据不同的工作负载和资源要求对服务进行独立缩扩容等优势。另一方面，当应用被拆分为多个微服务进程后，进程内的方法调用变成了了进程间的远程调用。引入了对大量服务的连接、管理和监控的复杂性,本文介绍了Service Mesh模式如何应对微服务架构的这些挑战，以及Service Mesh的明星开源项目Istio。","objectID":"6bf9de1b3f1e208ab3948072f722199d","permalink":"https://seven-demo.supcat.cn/2018/03/29/what-is-service-mesh-and-istio/","tags":["Microservice","Service Mesh","Istio"],"title":"谈谈微服务架构中的基础设施：Service Mesh与Istio"}
{"description":"API Gateway和Service Mesh的关系是我最近一直在思考的问题，也和同事及社区的朋友之间进行了一些讨论。这篇短文很清晰地总结了两者之间的相似之处以及这两者在微服务架构中的不同用途。","objectID":"5f40cb7ee919e9380caba8fe335a2284","permalink":"https://seven-demo.supcat.cn/2018/04/11/service-mesh-vs-api-gateway/","tags":["Microservice","Service Mesh","API Gateway"],"title":"Service Mesh 和 API Gateway的关系探讨（译文）"}
{"description":"Helm是Kubernetes生态系统中的一个软件包管理工具。本文将介绍为何要使用Helm进行Kubernetes软件包管理，澄清Helm中使用到的相关概念，并通过一个具体的示例学习如何使用Helm打包，分发，安装，升级及回退Kubernetes应用。","objectID":"201e94f7c83e7a8747fd29f9ba64c9e8","permalink":"https://seven-demo.supcat.cn/2018/04/16/using-helm-to-deploy-to-kubernetes/","tags":["Kubernetes","Helm"],"title":"Helm介绍"}
{"description":"这段时间对之前微服务安全相关的一些想法进行了进一步总结和归纳，理清在之前文章里面没有想得太清楚的地方，例如服务间的认证与鉴权以及用户身份在服务调用链中的传递。在这一系列博客里面将分为三个部分对微服务安全进行系统阐述：用户访问认证与鉴权，服务间认证与鉴权，外部系统访问控制。","objectID":"fbb3cbe3b11683fe3df1808c573e6770","permalink":"https://seven-demo.supcat.cn/2018/05/22/user_authentication_authorization/","tags":["Microservice","Security"],"title":"微服务安全沉思录之一"}
{"description":"一些外部的第三方系统可能需要访问系统内部的微服务。例如在网上商店的例子中，外部的推荐服务可能需要接入系统，以获取商店的商品目录信息。相对于内部服务之间的访问而言，外部系统的访问需要进行严格的安全控制。","objectID":"3da1bf44e3f80dea3a899e4c0e1b6df7","permalink":"https://seven-demo.supcat.cn/2018/05/23/external_system_auth/","tags":["Microservice"],"title":"微服务安全沉思录之三"}
{"description":"Kubernets 1.9版本引入了Admission Webhook(web 回调)扩展机制，通过Webhook,开发者可以非常灵活地对Kubernets API Server的功能进行扩展，在API Server创建资源时对资源进行验证或者修改。 Istio 0.7版本就利用了Kubernets webhook实现了sidecar的自动注入。","objectID":"ebdbdc6850a29582e2a73ec4c049c232","permalink":"https://seven-demo.supcat.cn/2018/05/23/istio-auto-injection-with-webhook/","tags":["Kubernetes","Istio","service Mesh"],"title":"Istio Sidecar自动注入原理"}
{"description":"除来自用户的访问请求以外，微服务应用中的各个微服务相互之间还有大量的访问,根据应用系统数据敏感程度不同，对于系统内微服务的访问也需要进行相应的安全控制。","objectID":"199f292461397fd0780909681c4b5b71","permalink":"https://seven-demo.supcat.cn/2018/05/23/service_2_service_auth/","tags":["Microservice","Security","service Mesh"],"title":"微服务安全沉思录之二"}
{"description":"Everything about setting up my own ubuntu desktop, it's just a Note in case I need it later","objectID":"660e095432fe1ebb885ffd9da876301b","permalink":"https://seven-demo.supcat.cn/2018/05/24/set_up_my_ubuntu_desktop/","tags":["ubuntu","service Mesh"],"title":"Everything about Setting Up My Ubuntu Desktop"}
{"description":"在6月1日这一天的早上，Istio社区宣布发布0.8 Release，除了常规的故障修复和性能改进外，这个儿童节礼物里面还有什么值得期待内容呢？让我们来看一看：","objectID":"930d056671e6e2b8bd548cc9de7005e5","permalink":"https://seven-demo.supcat.cn/2018/06/02/istio08/","tags":["Istio"],"title":"Istio 0.8 Release发布"}
{"description":"介绍Istio v1alpha3 routing API及其设计原则","objectID":"5f4b4e52982f29379be24944695891e8","permalink":"https://seven-demo.supcat.cn/2018/06/04/introducing-the-istio-v1alpha3-routing-api/","tags":["Istio"],"title":"Istio v1aplha3 routing API介绍（译文）"}
{"description":"介绍分布式系统中实现多副本技术的一系列方案，从主从复制到去中心化复制、再到状态机、共识算法，并分析各个方案的优缺点，如何选择主流存储的产品。\n重点对Raft算法的分析，Raft 虽然诞生晚，但它却是共识算法里面在工程界应用最广泛的。\n它将一个复杂问题拆分成三个子问题，分别是 Leader 选举、日志复制和安全性。\nRaft 通过心跳机制、随机化等实现了 Leader 选举，只要集群半数以上节点存活可相互通信，etcd 就可对外提供高可用服务。\nRaft 日志复制确保了 etcd 多节点间的数据一致性，我通过一个 etcd 日志复制整体流程图为你详细介绍了 etcd 写请求从提交到 Raft 模块，到被应用到状态机执行的各个流程，剖析了日志复制的核心原理，即一个日志条目只有被 Leader 同步到一半以上节点上，此日志条目才能称之为成功复制、已提交。\nRaft 的安全性，通过对 Leader 选举和日志复制增加一系列规则，保证了整个集群的一致性、完整性。","objectID":"4558eb344437227d0b7caa13e16105ed","permalink":"https://seven-demo.supcat.cn/2023/06/27/etcd%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E9%AB%98%E5%8F%AF%E7%94%A8-%E6%95%B0%E6%8D%AE%E5%BC%BA%E4%B8%80%E8%87%B4%E7%9A%84/","tags":["etcd","raft"],"title":"Raft协议:etcd如何实现高可用、数据强一致的?"}
{"description":"This tutorial introduces the basics of multi-module workspaces in Go.\n\nWith multi-module workspaces, you can tell the Go command that you’re writing code in multiple modules at the same time and easily build and run code in those modules. \n\nIn this tutorial, you’ll create two modules in a shared multi-module workspace, make changes across those modules, and see the results of those changes in a build.","objectID":"8cfe2aae81bcffde83ccf6a24c77773a","permalink":"https://seven-demo.supcat.cn/posts/2023-06-28-getting-started-with-multi-module-workspaces/","tags":["go","go.work","multi module"],"title":"Getting Started With Multi Module Workspaces"}
{"description":"This tutorial introduces the basics of multi-module workspaces in Go.\n\nWith multi-module workspaces, you can tell the Go command that you’re writing code in multiple modules at the same time and easily build and run code in those modules. \n\nIn this tutorial, you’ll create two modules in a shared multi-module workspace, make changes across those modules, and see the results of those changes in a build.","objectID":"98a2bd544a7cebfc9b1704c9f1ff3251","permalink":"https://seven-demo.supcat.cn/posts/2023-06-30-starts/","tags":["go","go.work","multi module"],"title":"编程技术-开启多模块"}